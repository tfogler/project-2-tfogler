import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		expand('results/{condition}_{rep}.sorted.bam', condition = CONDITIONS, rep = REPS),
	
		# expand('results/{condition}_{rep}.bam', condition = CONDITIONS, rep = REPS ),
		
		expand('results/{condition}_{rep}.index', condition = CONDITIONS, rep = REPS ),
		
		expand('results/{condition}_{rep}_flagstats.txt', condition = CONDITIONS, rep = REPS),
		
		"results/multiqc_report.html"

rule bowtie2_align:
	input:
		'samples/{condition}_{rep}.trimmed.fq.gz'
	output:
		'results/{condition}_{rep}.bam'
	threads: 16
	# params:
	conda:
		'envs/bowtie2_env.yml'
	shell:
		'''
		bowtie2 -x results/bt2_index/chr21/GRCh38.chr21 -U {input} | 
		samtools view -b > {output}
		'''

rule samtools_sort:
	input:
		'results/{condition}_{rep}.bam'
	output:
		'results/{condition}_{rep}.sorted.bam'
	conda:
		'envs/samtools_env.yml'

	shell:
		'''
		samtools sort {input} -o {output}
		rm {input}
		'''

rule samtools_index:
	input:
		'results/{condition}_{rep}.sorted.bam'
	output:
		'results/{condition}_{rep}.index'
	conda:
		'envs/samtools_env.yml'
	threads:
		4
	shell:
		'''
		samtools index -M {input} -o {output}
		'''

rule samtools_flagstats:
	input:
		'results/{condition}_{rep}.sorted.bam'
		
	output:
		'results/{condition}_{rep}_flagstats.txt'

	conda:
	        'envs/samtools_env.yml'

	shell:
		'''
		samtools flagstat {input} -O default > {output}
		'''

rule multiqc:
	input:
		sorted_bams = expand('results/{condition}_{rep}.sorted.bam', condition = CONDITIONS, rep = REPS),
		indices = expand('results/{condition}_{rep}.index', condition = CONDITIONS, rep = REPS ),
	output:
		report = 'results/multiqc_report.html'
	params:
		dir = 'results/'
	conda:
		'envs/multiqc_env.yml'
	shell:
		'''
		multiqc {params.dir} --outdir={params.dir}
		'''

#rule bamCoverage:
#	input:
#	output:
#	threads: 4
#	conda:
#		'envs/deeptools_env.yml'
#	shell:
#
#rule multiBwSummary:
#	input:
#	output:
#	conda:
#		'envs/deeptools_env.yml'
#	shell:

#rule plotCorrelation:
#	input:
#	output:
#	params:
#	conda:
#		'envs/deeptools_env.yml'
#	shell:
