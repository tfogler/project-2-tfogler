import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		(expand('results/{condition}_{rep}_tags', condition = CONDITIONS, rep = REPS)),
		# expand('results/RUNX1_{rep}_peaks.txt', rep = REPS),
		expand('results/RUNX1sample_{rep}_peaks.bed', rep = REPS)

rule make_tag_dir:
	input:
		bam = "results/{condition}_{rep}.sorted.bam"
	output:
		tag_dir = directory("results/{condition}_{rep}_tags")
	params:
	threads: 4
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		makeTagDirectory {output.tag_dir} {input.bam}
		'''

rule findPeaks:
	input:
		runx1_dir = 'results/RUNX1sample_{rep}_tags',
		input_dir = 'results/INPsample_{rep}_tags'
	output:
		auto = 'results/RUNX1sample_{rep}_peaks.txt'
	params: size = '-size 200'
	threads: 2
	conda:
		'envs/homer_env.yml'
	shell:
		'''
#		mkdir -p {input.runx1_dir}
		findPeaks {input.runx1_dir} -style factor -o {output.auto} {params.size} -i {input.input_dir}
		'''

rule convertPeakFiles:
	input:
		'results/RUNX1sample_{rep}_peaks.txt'
	output:
		'results/RUNX1sample_{rep}_peaks.bed'
	conda:
		'envs/homer_env.yml'
	shell:
		'''
		pos2bed.pl {input} > {output}
		'''

rule intersect_peaks:
	input:
		rep_un = 'results/RUNX1_rep1_peaks.bed',
		rep_du ='results/RUNX1_rep2_peaks.bed'
	output:
		'results/RUNX1_intersected_peaks.bed'
	params:
		option = ''
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect {params.option} rep_un rep_du > {output}
		'''

rule filter_blacklist:
	input:
		peaks_bed = 'results/RUNX1_intersected_peaks.bed',
		blacklist = 'results/hg380blacklist.v2.bed'
	output:
		filtered = 'results/RUNX1_filtered_intersected_peaks.bed'
	conda:
		'envs/bedtools_env.yml'
	shell:
		'''
		bedtools intersect -a {input.peaks_bed} -b {input.blacklist} -v > {output.filtered}
		'''

#rule unzip_gtf:
#	input:
#	output:
#	shell:

#rule annotate_peaks:
#	input:
#	output:
#	conda:
#		'envs/homer_env.yml'
#	shell:

#rule unzip_genome:
#	input:
#	output:
#	shell:

#rule motifs:
#	input:
#	output:
#	conda:
#		'envs/homer_env.yml'
#	shell:
