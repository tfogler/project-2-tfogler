import pandas

sample_csv = pandas.read_csv('sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
	input:
		# expand('samples/{condition}_{rep}.fastq.gz', condition = CONDITIONS, rep = REPS) 
		expand('results/{condition}_{rep}_fastqc.html',
		 condition = CONDITIONS,
		 rep = REPS
		),
		expand('samples/{condition}_{rep}.trimmed.fq.gz',
		 condition = CONDITIONS, 
		 rep = REPS
		) 

		

rule wget_files:
	output:
		'samples/{condition}_{rep}.fastq.gz'
	params:
		link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
		renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
	shell:
		'''
		wget -O {params.renamed} {params.link} 
		'''

rule fastqc:
	input:
		'samples/{condition}_{rep}.fastq.gz'
	output:
		'results/{condition}_{rep}_fastqc.html'
	params:
		outdir = '/projectnb/bf528/students/tfogler/project-2-tfogler/results'
	threads: 4
	conda:
		'envs/fastqc_env.yml'
	shell:
		'''
		fastqc {input} -o {params.outdir}
		'''

rule trimomatic:
	input:
		'samples/{condition}_{rep}.fastq.gz'
	output:
		'samples/{condition}_{rep}.trimmed.fq.gz'
	threads: 8
	params:
		adapters = 'results/TruSeq-SE.fa'
	conda:
		'envs/trimmomatic_env.yml'
	shell:
		'''
		trimmomatic SE -phred33 {input} {output} ILLUMINACLIP:{params.adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
		'''

#rule bowtie2_build_gencode:
#	input:
#	output:
#	params:
#	threads: 16
#	conda:
#		'envs/bowtie2_env.yml'
#	shell:
#		''